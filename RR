#!/usr/bin/env python3
import pandas as pd
import requests
import os
from datetime import datetime

# Hardcoded API token
API_TOKEN = "your-api-token-here"  # Replace with your actual DefectDojo API token

def log(message):
    """Log messages with timestamp to console."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def post_to_api(data):
    """Post data to DefectDojo API."""
    headers = {
        "Authorization": f"Token {API_TOKEN}",
        "Content-Type": "application/json"
    }
    url = "https://demo.defectdojo.org/api/v2/products"

    try:
        log(f"Submitting data to {url}")
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        log(f"POST successful: {response.json()}")
        return True
    except requests.RequestException as e:
        error_msg = f"API Error (POST): {e}"
        if hasattr(e, 'response') and e.response is not None:
            error_msg += f"\nResponse: {e.response.text}"
        log(error_msg)
        if hasattr(e, 'response') and e.response.status_code == 500:
            log("Server returned 500 Internal Server Error. Check payload or server status.")
        return False

def import_excel():
    """Import product data from data.xlsx in the script's directory."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(script_dir, "data.xlsx")
    log(f"Importing Excel file: {file_path}")
    
    try:
        df = pd.read_excel(file_path)
        required_columns = ["name", "description"]
        if not all(col in df.columns for col in required_columns):
            log("Error: Excel file must contain columns: name, description")
            return False

        success = True
        for _, row in df.iterrows():
            log(f"Processing product: {row['name']}")
            data = {
                "tags": [],
                "name": str(row["name"]),
                "description": str(row["description"]),
                "prod_numeric_grade": 21747483647,
                "enable_product_tag_inheritance": True,
                "enable_simple_risk_acceptance": True,
                "enable_full_risk_acceptance": True,
                "disable_sla_breach_notifications": True,
                "prod_type": 1,
                "sla_configuration": 1
            }
            if not post_to_api(data):
                success = False
        return success
    except Exception as e:
        log(f"Import Error: {e}")
        return False

def main():
    """Main function to import from data.xlsx."""
    if import_excel():
        log("Excel import completed successfully")
    else:
        log("Excel import failed")

if __name__ == "__main__":
    main()