import os
import sys
import threading
import webbrowser
import requests
import datetime
from dateutil.relativedelta import relativedelta
from flask import Flask, request, jsonify, render_template_string
import pystray
from PIL import Image

app = Flask(__name__)

# Configure DefectDojo
DEFECT_DOJO_URL = 'http://your-defectdojo-url'  # e.g., 'http://localhost:8080'
API_KEY = 'your-api-key-here'
HEADERS = {
    'Authorization': f'Token {API_KEY}',
    'Content-Type': 'application/json'
}

HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>DefectDojo Engagement Creator</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2-bootstrap-theme/0.1.0-beta.10/select2-bootstrap.min.css" />
</head>
<body>
    <div class="container">
        <h1>Create VAPT Engagements</h1>
        <label for="products">Select Products:</label>
        <select id="products" multiple="multiple" style="width:100%"></select>
        <button id="create-btn" class="btn btn-primary mt-3">Create VAPT Engagement</button>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="createModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Engagement</h5>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="quarter">Quarter:</label>
                        <select id="quarter" class="form-control">
                            <option>Q1</option>
                            <option>Q2</option>
                            <option>Q3</option>
                            <option>Q4</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="year">Year:</label>
                        <select id="year" class="form-control"></select>
                    </div>
                    <div class="form-group">
                        <label for="lead">Lead:</label>
                        <select id="lead" style="width:100%"></select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" id="confirm-create" class="btn btn-primary">Confirm Create</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script>
        var currentYear = new Date().getFullYear();
        $('#year').html(`
            <option>${currentYear}</option>
            <option>${currentYear + 1}</option>
        `);

        $('#products').select2({
            ajax: {
                url: '/search_products',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return { q: params.term };
                },
                processResults: function (data) {
                    return { results: data };
                },
                cache: true
            },
            placeholder: 'Search for products',
            minimumInputLength: 1,
            templateResult: function(repo) { return repo.text; },
            templateSelection: function(repo) { return repo.text; }
        });

        $('#lead').select2({
            ajax: {
                url: '/get_users',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return { q: params.term };
                },
                processResults: function (data) {
                    return { results: data };
                },
                cache: true
            },
            placeholder: 'Search for lead',
            minimumInputLength: 0
        });

        $('#create-btn').click(function() {
            if ($('#products').val().length === 0) {
                alert('Please select at least one product');
                return;
            }
            $('#createModal').modal('show');
        });

        $('#confirm-create').click(function() {
            var products = $('#products').val();
            var quarter = $('#quarter').val();
            var year = $('#year').val();
            var lead = $('#lead').val();
            if (!lead) {
                alert('Please select a lead');
                return;
            }
            $.ajax({
                url: '/create_engagements',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({products: products, quarter: quarter, year: year, lead: lead}),
                success: function(results) {
                    $('#createModal').modal('hide');
                    var msg = '';
                    results.forEach(function(r) {
                        if (r.success) {
                            msg += `Created: ${r.name}\\n`;
                        } else {
                            msg += `Error: ${r.error}\\n`;
                        }
                    });
                    alert(msg);
                }
            });
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML)

@app.route('/search_products')
def search_products():
    q = request.args.get('q', '')
    params = {'name__icontains': q, 'limit': 20, 'offset': 0}
    resp = requests.get(f'{DEFECT_DOJO_URL}/api/v2/products/', params=params, headers=HEADERS)
    if resp.status_code != 200:
        return jsonify([])
    products = resp.json().get('results', [])
    return jsonify([{'id': p['id'], 'text': p['name']} for p in products])

@app.route('/get_users')
def get_users():
    q = request.args.get('q', '')
    params = {'search': q, 'is_active': 'true', 'limit': 50, 'offset': 0}
    resp = requests.get(f'{DEFECT_DOJO_URL}/api/v2/users/', params=params, headers=HEADERS)
    if resp.status_code != 200:
        return jsonify([])
    users = resp.json().get('results', [])
    return jsonify([{'id': u['id'], 'text': f"{u.get('first_name', '')} {u.get('last_name', '')}".strip() or u['username']} for u in users])

@app.route('/create_engagements', methods=['POST'])
def create_engagements():
    data = request.json
    results = []
    today = datetime.date.today()
    next_month_start = (today + relativedelta(months=1)).replace(day=1)
    next_month_end = next_month_start + relativedelta(months=1, days=-1)
    for prod_id in data['products']:
        prod_resp = requests.get(f'{DEFECT_DOJO_URL}/api/v2/products/{prod_id}/', headers=HEADERS)
        if prod_resp.status_code != 200:
            results.append({'success': False, 'error': 'Failed to fetch product'})
            continue
        prod_name = prod_resp.json()['name']
        name = f"{prod_name}-{data['quarter']}_{data['year']}"
        payload = {
            'tags': ['vapt'],
            'name': name,
            'target_start': next_month_start.isoformat(),
            'target_end': next_month_end.isoformat(),
            'status': 'Active',  # Changed to 'Active' as 'Not Started' is not a valid choice
            'lead': data['lead'],
            'product': prod_id,
        }
        resp = requests.post(f'{DEFECT_DOJO_URL}/api/v2/engagements/', json=payload, headers=HEADERS)
        if resp.status_code == 201:
            eng = resp.json()
            test_payload = {
                'engagement': eng['id'],
                'test_type': 'Pentest',
                'target_start': payload['target_start'],
                'target_end': payload['target_end'],
            }
            resp_test = requests.post(f'{DEFECT_DOJO_URL}/api/v2/tests/', json=test_payload, headers=HEADERS)
            if resp_test.status_code == 201:
                results.append({'success': True, 'name': name})
            else:
                results.append({'success': False, 'error': 'Engagement created but test failed: ' + resp_test.text})
        else:
            results.append({'success': False, 'error': resp.text})
    return jsonify(results)

def create_image():
    # Simple green icon
    image = Image.new('RGB', (64, 64), color=(0, 255, 0))
    return image

def open_browser():
    webbrowser.open('http://127.0.0.1:5000')

def quit_app(icon, item):
    icon.stop()
    os._exit(0)

def run_flask():
    app.run(port=5000, debug=False, use_reloader=False)

if __name__ == '__main__':
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    # Open browser initially
    webbrowser.open('http://127.0.0.1:5000')

    # System tray
    icon = pystray.Icon('DefectDojo Creator')
    icon.icon = create_image()
    icon.menu = pystray.Menu(
        pystray.MenuItem('Open', open_browser),
        pystray.MenuItem('Exit', quit_app)
    )
    icon.run()