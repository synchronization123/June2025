import requests
import pandas as pd

# Configurations
API_URL = "https://demo.defectdojo.org/api/v2"
ENGAGEMENT_ID = 72668
ENVIRONMENT_ID = 1
TEST_TYPE_ID = 210
TEST_TYPE_NAME = "Dojo-mapping"
TOKEN = "sjsjnns"
EXCEL_FILE = "mapping.xlsx"

HEADERS = {
    "Authorization": f"Token {TOKEN}",
    "Content-Type": "application/json"
}

# Step 1: Fetch engagement details
def get_engagement_details(engagement_id):
    response = requests.get(f"{API_URL}/engagements/{engagement_id}/", headers=HEADERS)
    response.raise_for_status()
    data = response.json()
    return data['target_start'], data['target_end'], data['lead']

# Step 2: Read mapping.xlsx
def read_excel(file_path):
    df = pd.read_excel(file_path)
    if 'title' not in df.columns or 'description' not in df.columns:
        raise ValueError("Excel must contain 'title' and 'description' columns")
    return df[['title', 'description']]

# Step 3: Create tests from Excel rows
def create_tests(df, engagement_id, start_date, end_date, lead):
    for idx, row in df.iterrows():
        payload = {
            "title": row['title'],
            "description": row['description'],
            "target_start": start_date,
            "target_end": end_date,
            "lead": lead,
            "engagement": engagement_id,
            "environment": ENVIRONMENT_ID,
            "test_type": TEST_TYPE_ID,
            "test_type_name": TEST_TYPE_NAME
        }

        response = requests.post(f"{API_URL}/tests/", json=payload, headers=HEADERS)
        if response.status_code == 201:
            print(f"[✓] Test added: {row['title']}")
        else:
            print(f"[✗] Failed to add: {row['title']}, Status: {response.status_code}, Error: {response.text}")

# Main flow
if __name__ == "__main__":
    try:
        start_date, end_date, lead = get_engagement_details(ENGAGEMENT_ID)
        df = read_excel(EXCEL_FILE)
        create_tests(df, ENGAGEMENT_ID, start_date, end_date, lead)
    except Exception as e:
        print(f"Error: {e}")