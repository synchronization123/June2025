import requests

# ----------------------------
# Config: change these values
# ----------------------------
BASE_URL = "https://demo.defectdojo.org"
ATTACHMENT_PATH = "/media/engagements/attachments/yourfile.html"  # update with actual path
FULL_URL = BASE_URL + ATTACHMENT_PATH

# If auth is required (remove if public access works)
HEADERS = {
    # "Authorization": "Token YOUR_API_KEY_HERE"
}

# ----------------------------
# Fetch file headers
# ----------------------------
response = requests.get(FULL_URL, headers=HEADERS, stream=True)

print("Status:", response.status_code)
print("\n--- All Response Headers ---")
for k, v in response.headers.items():
    print(f"{k}: {v}")

# ----------------------------
# Analysis logic
# ----------------------------
content_type = response.headers.get("Content-Type", "").lower()
content_disp = response.headers.get("Content-Disposition", "").lower()
x_content_type = response.headers.get("X-Content-Type-Options", "").lower()
csp = response.headers.get("Content-Security-Policy", "").lower()
x_frame = response.headers.get("X-Frame-Options", "").lower()

print("\n--- Analysis ---")

if "text/html" not in content_type:
    print("❌ Not HTML content (browser will not render inline).")
else:
    if "attachment" in content_disp:
        print("❌ Content-Disposition=attachment → Browser will download.")
    elif "inline" in content_disp or content_disp == "":
        # check extra headers that may block inline rendering
        if x_content_type == "nosniff":
            print("⚠️ X-Content-Type-Options=nosniff → Some browsers may force download instead of rendering.")
        if "frame-ancestors 'none'" in csp or x_frame in ["deny", "sameorigin"]:
            print("⚠️ CSP/X-Frame-Options may block rendering in an iframe.")
        print("✅ Likely to render inline (unless browser security blocks).")

if not content_disp:
    print("ℹ️ No Content-Disposition header set (browser decides).")