import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse
import hashlib

# === Configuration ===
html_input = 'input.html'         # Your source HTML file
html_output = 'output.html'       # Final HTML file with local image links
image_folder = 'images'           # Folder to store downloaded images
token = 'dhdjjdjd'                # Replace with your actual DefectDojo API token

# Create image directory if it doesn't exist
os.makedirs(image_folder, exist_ok=True)

# Load and parse HTML
with open(html_input, 'r', encoding='utf-8') as f:
    soup = BeautifulSoup(f, 'html.parser')

# Loop through all <img> tags
for img_tag in soup.find_all('img'):
    src = img_tag.get('src')

    if not src or not src.startswith('http'):
        continue  # Skip local or invalid src

    # Create a filename using hash to avoid conflicts
    extension = '.png'  # DefectDojo files typically are images; defaulting to .png
    filename_hash = hashlib.md5(src.encode()).hexdigest()
    local_filename = f"{filename_hash}{extension}"
    local_path = os.path.join(image_folder, local_filename)

    # Download if not already saved
    if not os.path.exists(local_path):
        try:
            headers = {'Authorization': f'Token {token}'}
            response = requests.get(src, headers=headers, timeout=10)

            if response.status_code == 200:
                with open(local_path, 'wb') as out_file:
                    out_file.write(response.content)
                print(f"Downloaded: {src}")
            else:
                print(f"Failed to download {src} (HTTP {response.status_code})")
                continue
        except Exception as e:
            print(f"Error downloading {src}: {e}")
            continue

    # Replace <img src> with local path
    img_tag['src'] = os.path.join(image_folder, local_filename)

# Save the updated HTML
with open(html_output, 'w', encoding='utf-8') as f:
    f.write(str(soup))

print(f"\nâœ… Completed. Updated HTML saved to: {html_output}")