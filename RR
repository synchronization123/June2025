# Project.pyw
import os
import sys
import subprocess

# --- Step 1: Ensure pip is installed ---
try:
    import pip
except ImportError:
    try:
        import ensurepip
        ensurepip.bootstrap()
    except Exception as e:
        print("‚ùå Could not install pip:", e)
        sys.exit(1)

# --- Step 2: Ensure required modules ---
REQUIRED = ["requests", "flask", "customtkinter", "pystray", "Pillow", "CTkMessagebox"]

for pkg in REQUIRED:
    try:
        __import__(pkg if pkg != "Pillow" else "PIL")
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])

# --- Step 3: Imports ---
import json
import threading
import webbrowser
import requests
import signal
import urllib3
import zipfile
import customtkinter as ctk
from flask import Flask, send_from_directory, abort
import pystray
from pystray import MenuItem as item
from PIL import Image, ImageDraw
from CTkMessagebox import CTkMessagebox   # ‚úÖ correct import

# Suppress HTTPS warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- Globals ---
CURRENT_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))
TOKEN_FILE = os.path.join(CURRENT_DIR, "token.json")
ZIP_FILE = os.path.join(CURRENT_DIR, "appsecvm.zip")
APPSEC_DIR = os.path.join(CURRENT_DIR, "appsecvm")
URL = "https://demo.defectdojo.org/api/v2/engagements/3/files/download/1/"

app = Flask(__name__)
flask_thread = None
icon = None
root = None
service_running = False
in_tray = False

# --- Flask routes ---
@app.route('/')
def serve_home():
    index_file = os.path.join(APPSEC_DIR, "home.html")
    if os.path.exists(index_file):
        return send_from_directory(APPSEC_DIR, "home.html")
    else:
        return abort(404, description="home.html not found in appsecvm/")

@app.route('/<path:filename>')
def serve_files(filename):
    full_path = os.path.join(APPSEC_DIR, filename)
    if os.path.exists(full_path):
        return send_from_directory(APPSEC_DIR, filename)
    else:
        return abort(404, description=f"{filename} not found.")

def run_flask():
    app.run(host="127.0.0.1", port=5000, debug=False, use_reloader=False)

# --- Token handling ---
def load_token():
    if os.path.exists(TOKEN_FILE):
        try:
            with open(TOKEN_FILE, "r") as f:
                data = json.load(f)
                token = data.get("token", "").strip()
                return token if token else None
        except Exception:
            return None
    return None

def save_token(token):
    with open(TOKEN_FILE, "w") as f:
        json.dump({"token": token}, f)

# --- Service control ---
def start_service():
    global flask_thread, service_running
    token = load_token()
    if not token:
        CTkMessagebox(title="No Token", message="Please update the token first.", icon="warning")
        return

    try:
        if not os.path.exists(APPSEC_DIR) or not os.listdir(APPSEC_DIR):
            headers = {"Authorization": f"Token {token}"}
            response = requests.get(URL, headers=headers, timeout=20, verify=False)
            if response.status_code != 200:
                CTkMessagebox(title="Error", message=f"Download failed (HTTP {response.status_code}).", icon="cancel")
                return

            with open(ZIP_FILE, "wb") as f:
                f.write(response.content)

            with zipfile.ZipFile(ZIP_FILE, "r") as zip_ref:
                zip_ref.extractall(APPSEC_DIR)

            os.remove(ZIP_FILE)

        if flask_thread is None or not flask_thread.is_alive():
            flask_thread = threading.Thread(target=run_flask, daemon=True)
            flask_thread.start()

        webbrowser.open("http://127.0.0.1:5000")

        service_running = True
        btn_start.configure(state="disabled")
        btn_update.configure(state="disabled")
        btn_stop.configure(state="normal")

        CTkMessagebox(title="Service", message="‚úÖ Service started at http://127.0.0.1:5000", icon="check")

        hide_to_tray()

    except Exception as e:
        CTkMessagebox(title="Error", message=f"Failed to start service:\n{e}", icon="cancel")

def stop_service():
    global service_running
    service_running = False
    try:
        if icon:
            icon.stop()
    except Exception:
        pass
    try:
        root.destroy()
    except Exception:
        pass
    try:
        os.kill(os.getpid(), signal.SIGTERM)
    except Exception:
        sys.exit(0)

def update_token():
    global btn_start, btn_stop
    if service_running:
        return
    token = ctk.CTkInputDialog(text="Enter new token:", title="Update Token").get_input()
    if token and token.strip():
        save_token(token.strip())
        CTkMessagebox(title="Success", message="Token updated successfully.", icon="check")
        btn_start.configure(state="normal")
        btn_stop.configure(state="disabled")

# --- Tray helpers ---
def create_image(color="blue"):
    img = Image.new('RGB', (64, 64), "white")
    d = ImageDraw.Draw(img)
    d.rectangle([16, 16, 48, 48], fill=color)
    return img

def show_window(icon_obj=None, item_obj=None):
    global root, icon, in_tray
    if icon:
        icon.stop()
    root.deiconify()
    root.state("normal")
    in_tray = False

def hide_to_tray(event=None):
    global icon, in_tray
    if in_tray:
        return
    root.withdraw()
    in_tray = True
    icon = pystray.Icon("ProjectService")
    icon.icon = create_image("green" if service_running else "blue")
    icon.title = "Project Service"
    icon.menu = pystray.Menu(
        item('Restore Window', show_window),
        item('Exit', lambda: stop_service())
    )
    threading.Thread(target=icon.run, daemon=True).start()

# --- Modern CTk GUI ---
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

root = ctk.CTk()
root.title("‚ö° Project Service")
root.geometry("400x220")
root.resizable(False, False)

btn_start = ctk.CTkButton(root, text="üöÄ Start Service", command=start_service,
                          width=200, height=40, corner_radius=12)
btn_start.pack(pady=10)

btn_update = ctk.CTkButton(root, text="üîë Update Token", command=update_token,
                           width=200, height=40, corner_radius=12)
btn_update.pack(pady=10)

btn_stop = ctk.CTkButton(root, text="üõë Stop Service", command=stop_service,
                         width=200, height=40, fg_color="red",
                         hover_color="#b30000", corner_radius=12)
btn_stop.pack(pady=10)

# --- Initial button states ---
if not load_token():
    btn_start.configure(state="disabled")
    btn_stop.configure(state="disabled")
else:
    btn_stop.configure(state="disabled")

# Minimize ‚Üí tray
def on_minimize(event):
    if root.state() == "iconic":
        hide_to_tray()

root.bind("<Unmap>", on_minimize)

# Disable X button
root.protocol("WM_DELETE_WINDOW", lambda: None)

root.mainloop()