import os
import requests
import browser_cookie3
from bs4 import BeautifulSoup
from urllib.parse import urlparse
import hashlib

# === Configuration ===
html_input = 'input.html'
html_output = 'output.html'
image_folder = 'images'
dojo_domain = 'demo.defectdojo.org'

# Use Chrome cookies (non-admin version)
try:
    cookies = browser_cookie3.chrome(domain_name=dojo_domain)
except Exception as e:
    print(f"❌ Could not access Chrome cookies: {e}")
    exit(1)

# Ensure image folder exists
os.makedirs(image_folder, exist_ok=True)

# Load and parse HTML
with open(html_input, 'r', encoding='utf-8') as f:
    soup = BeautifulSoup(f, 'html.parser')

# Process image URLs
for img_tag in soup.find_all('img'):
    src = img_tag.get('src')
    if not src or not src.startswith('http'):
        continue

    ext = '.png'
    filename = hashlib.md5(src.encode()).hexdigest() + ext
    local_path = os.path.join(image_folder, filename)

    if not os.path.exists(local_path):
        try:
            response = requests.get(src, cookies=cookies, timeout=10)
            content_type = response.headers.get('Content-Type', '')
            if 'image' in content_type:
                with open(local_path, 'wb') as f_out:
                    f_out.write(response.content)
                print(f"✅ Downloaded: {src}")
            else:
                print(f"⚠️ Failed - Not an image. Got: {content_type}")
                continue
        except Exception as e:
            print(f"❌ Error downloading {src}: {e}")
            continue

    # Replace URL in HTML with local path
    img_tag['src'] = os.path.join(image_folder, filename)

# Save updated HTML
with open(html_output, 'w', encoding='utf-8') as f:
    f.write(str(soup))

print(f"\n✅ Done. Updated HTML saved to: {html_output}")