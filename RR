# ofsc.py - Obfuscator for Project.pyw
import base64

# Input: clean version
with open("Project_readable.pyw", "r", encoding="utf-8") as f:
    source = f.read()

# Encode + reverse
encoded = base64.b64encode(source.encode("utf-8")).decode("utf-8")[::-1]

# Build stealth wrapper
wrapper = f'''# Project.pyw (stealth obfuscated)
# Auto-generated by ofsc.py

cipher = {encoded!r}

# Build "base64" dynamically using 'cbtf' and math
part1 = "cbtf".replace("cbtf", "ba" + "se")   # -> "base"
part2 = str(32*2)                             # -> "64"
module_name = part1 + part2                   # -> "base64"

# Import dynamically
mod = __import__(module_name)

# Build "b64decode" dynamically
decoder_name = "".join([chr(x) for x in [98,54,52,100,101,99,111,100,101]])

# Get decoder
decode_fn = getattr(mod, decoder_name)

# Run payload
exec(decode_fn(cipher[::-1]).decode("utf-8"))
'''

# Save obfuscated file
with open("Project.pyw", "w", encoding="utf-8") as f:
    f.write(wrapper)

print("âœ… Obfuscated Project.pyw generated successfully.")