import tkinter as tk
from tkinter import scrolledtext
import subprocess
import threading
import os
import time
import signal

# Global process handler
current_process = None
spinner_running = False

def run_script(script_filename):
    def worker():
        global current_process, spinner_running

        disable_buttons()
        output_console.insert(tk.END, f"\n[Running] {script_filename}...\n")
        output_console.see(tk.END)

        spinner_running = True
        threading.Thread(target=spinner_animation).start()

        command = f'cmd /c python "{script_filename}"'
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW

        try:
            current_process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                shell=True,
                startupinfo=startupinfo
            )

            stdout, stderr = current_process.communicate()

            if stdout:
                output_console.insert(tk.END, stdout)
            if stderr:
                output_console.insert(tk.END, f"\n[Error]\n{stderr}")

            output_console.insert(tk.END, "\n[Finished]\n")
            output_console.see(tk.END)
        except Exception as e:
            output_console.insert(tk.END, f"\n[Exception] {str(e)}\n")
        finally:
            spinner_running = False
            enable_buttons()
            current_process = None

    threading.Thread(target=worker).start()

def stop_script():
    global current_process, spinner_running
    if current_process and current_process.poll() is None:
        try:
            current_process.terminate()
            output_console.insert(tk.END, "\n[Stopped by user]\n")
        except Exception as e:
            output_console.insert(tk.END, f"\n[Error stopping script] {str(e)}\n")
    spinner_running = False
    enable_buttons()

def spinner_animation():
    spinner_chars = ['|', '/', '-', '\\']
    idx = 0
    while spinner_running:
        spinner_label.config(text=f"Processing... {spinner_chars[idx % len(spinner_chars)]}")
        idx += 1
        time.sleep(0.1)
    spinner_label.config(text="")

def disable_buttons():
    btn_fetch.config(state="disabled")
    btn_update.config(state="disabled")
    btn_comments.config(state="disabled")
    btn_stop.config(state="normal")

def enable_buttons():
    btn_fetch.config(state="normal")
    btn_update.config(state="normal")
    btn_comments.config(state="normal")
    btn_stop.config(state="disabled")

# GUI setup
root = tk.Tk()
root.title("Jira Automation Panel")
root.geometry("740x560")
root.resizable(False, False)

btn_frame = tk.Frame(root)
btn_frame.pack(pady=10)

btn_fetch = tk.Button(btn_frame, text="Fetch Jira", width=20, command=lambda: run_script("fetch_jira.python"))
btn_update = tk.Button(btn_frame, text="Update Component", width=20, command=lambda: run_script("update_component.python"))
btn_comments = tk.Button(btn_frame, text="Fetch Comments", width=20, command=lambda: run_script("fetch_comments.python"))
btn_stop = tk.Button(btn_frame, text="â›” Stop", width=15, state="disabled", command=stop_script)

btn_fetch.grid(row=0, column=0, padx=10)
btn_update.grid(row=0, column=1, padx=10)
btn_comments.grid(row=0, column=2, padx=10)
btn_stop.grid(row=0, column=3, padx=10)

spinner_label = tk.Label(root, text="", font=("Consolas", 12), fg="green")
spinner_label.pack()

output_console = scrolledtext.ScrolledText(root, width=88, height=25, wrap=tk.WORD, bg="#1e1e1e", fg="white", font=("Consolas", 10))
output_console.pack(padx=10, pady=10)

root.mainloop()