import tkinter as tk
from tkinter import ttk, messagebox
import requests
from datetime import datetime
import pandas as pd

# ===== CONFIG =====
API_TOKEN = "hdjdjdjdjdjd"
BASE_URL = "https://demo.defectdojo.org"
HEADERS = {"Authorization": f"Token {API_TOKEN}"}
LIMIT = 1000

# ===== API FUNCTIONS =====
def fetch_engagements(session, log_fn):
    url = f"{BASE_URL}/api/v2/engagements/"
    params = {"limit": LIMIT, "offset": 0}
    log_fn(f"Fetching engagements...")
    r = session.get(url, params=params)
    if r.status_code != 200:
        raise RuntimeError(f"Failed to fetch engagements: {r.status_code} {r.text}")
    return r.json().get("results", [])

def fetch_findings_for_date(session, date_str, log_fn):
    url = f"{BASE_URL}/api/v2/findings/"
    params = {
        "created": date_str,
        "limit": LIMIT,
        "offset": 0
    }
    log_fn(f"Fetching findings for {date_str}...")
    r = session.get(url, params=params)
    if r.status_code != 200:
        raise RuntimeError(f"Failed to fetch findings: {r.status_code} {r.text}")
    return r.json().get("results", [])

def fetch_patch_jira_count(session, engagement_id):
    url = f"{BASE_URL}/api/v2/tests/"
    params = {"engagement": engagement_id, "tags": "patch_jira", "limit": LIMIT, "offset": 0}
    r = session.get(url, params=params)
    if r.status_code != 200:
        return 0
    return len(r.json().get("results", []))

# ===== MAIN LOGIC =====
def process_dates(date1, date2, log_fn, table, root):
    try:
        session = requests.Session()
        session.headers.update(HEADERS)

        engagements = fetch_engagements(session, log_fn)
        findings_all = []
        for date_str in [date1, date2]:
            findings = fetch_findings_for_date(session, date_str, log_fn)
            findings_all.extend(findings)

        rows = []
        for f in findings_all:
            name = f.get("name", "")
            created = f.get("created", "")[:10]
            updated = f.get("updated", "")[:10]
            commit_hash = f.get("commit_hash", "")
            version = f.get("version", "")
            engagement_id = f.get("engagement")
            jiras_count = fetch_patch_jira_count(session, engagement_id)

            review_status = commit_hash if commit_hash else "Approved"
            if review_status.strip().lower() == "not started" or not review_status.strip():
                review_status = "Approved"

            created_dt = datetime.strptime(created, "%Y-%m-%d")
            updated_dt = datetime.strptime(updated, "%Y-%m-%d") if updated else created_dt
            timeline_days = (updated_dt - created_dt).days

            rows.append([
                name,
                created,
                "Completed",
                review_status,
                updated,
                f"{timeline_days} day(s)",
                version,
                jiras_count
            ])

        df = pd.DataFrame(rows, columns=[
            "Patch",
            "Creation Date",
            "Status",
            "Review Status",
            "Completion Date",
            "Timeline",
            "IR",
            "No. Of Jiras"
        ])

        filename = f"patches_completed_{date1}-{date2}.xlsx"
        df.to_excel(filename, index=False)
        log_fn(f"Data saved to {filename}")

        # Update table
        for row in table.get_children():
            table.delete(row)
        for r in rows:
            table.insert("", "end", values=r)

    except Exception as e:
        messagebox.showerror("Error", str(e))

# ===== GUI =====
def run_gui():
    root = tk.Tk()
    root.title("DefectDojo Patch Summary")
    root.geometry("1000x600")
    root.configure(bg="#f7f9fc")

    style = ttk.Style(root)
    style.theme_use("clam")
    style.configure("Treeview", rowheight=28, font=("Segoe UI", 10))
    style.configure("Treeview.Heading", font=("Segoe UI", 10, "bold"))
    style.configure("TButton", font=("Segoe UI", 10), padding=6)
    style.configure("TLabel", background="#f7f9fc", font=("Segoe UI", 10))

    # Date inputs
    frame_top = ttk.Frame(root)
    frame_top.pack(pady=10)

    ttk.Label(frame_top, text="Date 1 (YYYY-MM-DD):").grid(row=0, column=0, padx=5)
    date1_var = tk.StringVar()
    date1_entry = ttk.Entry(frame_top, textvariable=date1_var, width=12)
    date1_entry.grid(row=0, column=1, padx=5)

    ttk.Label(frame_top, text="Date 2 (YYYY-MM-DD):").grid(row=0, column=2, padx=5)
    date2_var = tk.StringVar()
    date2_entry = ttk.Entry(frame_top, textvariable=date2_var, width=12)
    date2_entry.grid(row=0, column=3, padx=5)

    # Buttons
    frame_btn = ttk.Frame(root)
    frame_btn.pack(pady=5)
    def log_fn(msg):
        console.insert("end", msg + "\n")
        console.see("end")

    btn_fetch = ttk.Button(
        frame_btn,
        text="Fetch Data",
        command=lambda: process_dates(date1_var.get(), date2_var.get(), log_fn, table, root)
    )
    btn_fetch.pack()

    # Table
    columns = ["Patch", "Creation Date", "Status", "Review Status",
               "Completion Date", "Timeline", "IR", "No. Of Jiras"]
    table = ttk.Treeview(root, columns=columns, show="headings", height=10)
    for col in columns:
        table.heading(col, text=col)
        table.column(col, anchor="center", width=120)
    table.pack(fill="both", expand=True, padx=10, pady=10)

    # Console log
    ttk.Label(root, text="Console Log:").pack(anchor="w", padx=10)
    console = tk.Text(root, height=6, wrap="word", font=("Consolas", 9))
    console.pack(fill="x", padx=10, pady=5)

    root.mainloop()

if __name__ == "__main__":
    run_gui()