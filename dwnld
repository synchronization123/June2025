import os
import re
import pandas as pd
from pathlib import Path

# Define regex patterns for potential XXE vulnerabilities
xxe_patterns = [
    r'<!DOCTYPE\s+[^>]*\s*\[.*?!ENTITY\s+[^>]*>',  # DOCTYPE with ENTITY declaration
    r'<!ENTITY\s+[^>]*>',                          # ENTITY declaration
    r'XMLInputFactory\s*\.\s*newInstance\s*\(\s*\)',  # XMLInputFactory usage
    r'DocumentBuilderFactory\s*\.\s*newInstance\s*\(\s*\)',  # DocumentBuilderFactory usage
    r'SAXParserFactory\s*\.\s*newInstance\s*\(\s*\)',  # SAXParserFactory usage
    r'javax\.xml\.parsers\.DocumentBuilder\s*',     # DocumentBuilder usage
    r'javax\.xml\.stream\.XMLInputFactory\s*',     # XMLInputFactory import or usage
    r'org\.xml\.sax\.helpers\.XMLReaderFactory\s*'  # XMLReaderFactory usage
]

def scan_file(file_path):
    """Scan a single file for XXE vulnerabilities and return findings."""
    findings = []
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
            lines = file.readlines()
            for line_number, line in enumerate(lines, 1):
                for pattern in xxe_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        findings.append({
                            'Filepath': str(file_path),
                            'Filename': os.path.basename(file_path),
                            'Line Number': line_number,
                            'Vulnerable Code Line': line.strip()
                        })
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
    return findings

def scan_directory(directory):
    """Scan all JSP, Java, and XML files in directory and subdirectories for XXE vulnerabilities."""
    all_findings = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(('.jsp', '.java', '.xml')):  # Include .java files
                file_path = os.path.join(root, file)
                findings = scan_file(file_path)
                all_findings.extend(findings)
    return all_findings

def save_to_excel(findings, output_file):
    """Save findings to an Excel file in the current directory."""
    if not findings:
        print("No XXE vulnerabilities found.")
        return
    
    df = pd.DataFrame(findings)
    df.to_excel(output_file, index=False, engine='openpyxl')
    print(f"Findings saved to {output_file}")

def main():
    # Get current directory as the root for scanning
    directory = os.getcwd()
    output_file = os.path.join(directory, 'xxe_vulnerabilities.xlsx')
    
    print(f"Scanning JSP, Java, and XML files in {directory} and its subdirectories...")
    
    # Scan for vulnerabilities
    findings = scan_directory(directory)
    
    # Save results to Excel
    save_to_excel(findings, output_file)

if __name__ == "__main__":
    main()