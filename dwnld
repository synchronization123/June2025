from flask import Flask, request, render_template_string, redirect, url_for
import sqlite3
import pickle

app = Flask(__name__)

# --- DATABASE SETUP (in-memory for demo) ---
def init_db():
    conn = sqlite3.connect('test.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT);")
    cursor.execute("INSERT INTO users (username, password) VALUES ('admin', 'admin123');")
    conn.commit()
    conn.close()

init_db()

# --- LOGIN VULNERABLE TO SQL INJECTION ---
@app.route("/", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")

        # VULNERABLE SQL QUERY
        query = f"SELECT * FROM users WHERE username='{username}' AND password='{password}'"
        conn = sqlite3.connect('test.db')
        cursor = conn.cursor()
        try:
            cursor.execute(query)
            user = cursor.fetchone()
        except Exception as e:
            return f"SQL Error: {e}"

        if user:
            return redirect(url_for('dashboard', user=username))
        else:
            return "Invalid credentials"
    return '''
        <h2>Login</h2>
        <form method="post">
            Username: <input name="username"><br>
            Password: <input name="password" type="password"><br>
            <input type="submit" value="Login">
        </form>
    '''

# --- DASHBOARD VULNERABLE TO XSS ---
@app.route("/dashboard")
def dashboard():
    user = request.args.get("user", "Guest")
    html = f"<h1>Welcome, {user}!</h1><p>This is your dashboard.</p>"
    return render_template_string(html)

# --- INSECURE DESERIALIZATION ---
@app.route("/deserialize", methods=["GET", "POST"])
def deserialize():
    if request.method == "POST":
        data = request.form.get("data")
        try:
            obj = pickle.loads(bytes.fromhex(data))
            return f"Deserialized: {obj}"
        except Exception as e:
            return f"Error: {e}"
    return '''
        <h2>Deserialize Data</h2>
        <form method="post">
            Hex Pickle Data: <input name="data"><br>
            <input type="submit" value="Submit">
        </form>
    '''

# --- OPEN REDIRECT ---
@app.route("/redirect")
def open_redirect():
    target = request.args.get("next", "/")
    return redirect(target)

# --- HARDCODED CREDENTIALS ---
@app.route("/secret")
def secret():
    return "API Key: hardcodedapikey123456789"

if __name__ == "__main__":
    app.run(debug=True)