import requests
import pandas as pd
import re
from requests.auth import HTTPBasicAuth

# Configuration
jenkins_base_url = "https://jenkins.crm.com"
username = "your_jenkins_username"  # Replace with your actual Jenkins username
password = "your_jenkins_password"  # Replace with your actual Jenkins password
output_excel = "jenkins_report.xlsx"

# Step 1: Fetch Jenkins jobs names and URLs
api_url = f"{jenkins_base_url}/api/json?tree=jobs[name,url]"
response = requests.get(api_url, auth=HTTPBasicAuth(username, password))

if response.status_code != 200:
    raise Exception(f"Failed to fetch jobs: {response.status_code} - {response.text}")

data = response.json()
jobs = data.get('jobs', [])

# Prepare results list
results = []

# Process each job
for job in jobs:
    name = job['name']
    url = job['url']
    job_result = {
        "Job Name": name,
        "Url": url,
        "Sonarqube": "not found",
        "Dependency Track": "No",
        "Bitbucket": "not found"
    }

    # Step 2-4: Fetch console text for the last successful build on develop branch
    # Construct console_url using the job's url
    console_url = f"{url}job/develop/lastSuccessfulBuild/consoleText"
    console_response = requests.get(console_url, auth=HTTPBasicAuth(username, password))

    if console_response.status_code != 200:
        print(f"Warning: Failed to fetch console text for {name}: {console_response.status_code}")
        results.append(job_result)
        continue

    console_text = console_response.text

    # Check for Dependency Track (anywhere in text)
    if "The artifact was successfully published" in console_text:
        job_result["Dependency Track"] = "Yes"

    # Parse lines for Sonarqube and Bitbucket
    lines = console_text.split('\n')
    for line in lines:
        # Step 2: Check for Sonarqube
        if "ANALYSIS SUCCESSFUL" in line and job_result["Sonarqube"] == "not found":
            # Extract URL like https://sonar.crm.com... from the line
            sonar_match = re.search(r'(https://sonar\.crm\.com[^\s]*)', line)
            if sonar_match:
                job_result["Sonarqube"] = sonar_match.group(1)

        # Step 4: Check for Bitbucket
        if "Cloning repository" in line and job_result["Bitbucket"] == "not found":
            # Extract URL like https://bitbucket.crm.com... from the line
            bitbucket_match = re.search(r'Cloning repository (https://bitbucket\.crm\.com[^\s]*)', line)
            if bitbucket_match:
                job_result["Bitbucket"] = bitbucket_match.group(1)

    results.append(job_result)

# Create DataFrame and export to Excel
df = pd.DataFrame(results)
df.to_excel(output_excel, index=False)
print(f"Report generated: {output_excel}")