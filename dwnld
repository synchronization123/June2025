import requests
import pandas as pd
from datetime import datetime
from dateutil import parser

# ---------------- CONFIG ---------------- #
API_TOKEN = "hdjdjdjdjdjd"
BASE_URL = "https://demo.defectdojo.org"
LIMIT = 1000
# ----------------------------------------- #

def fetch_engagements(session):
    url = f"{BASE_URL}/api/v2/engagements/"
    params = {"limit": LIMIT}
    r = session.get(url, params=params)
    if r.status_code != 200:
        raise RuntimeError(f"Failed to fetch engagements: {r.status_code} {r.text}")
    return r.json().get("results", [])

def fetch_patch_jira_count(session, engagement_id):
    url = f"{BASE_URL}/api/v2/tests/"
    params = {"engagement": engagement_id, "tags": "patch_jira"}
    r = session.get(url, params=params)
    if r.status_code != 200:
        print(f"[WARN] Failed to fetch Jira count for engagement {engagement_id}: {r.status_code}")
        return 0
    return len(r.json().get("results", []))

def main():
    date1 = input("Enter start date (YYYY-MM-DD): ").strip()
    date2 = input("Enter end date (YYYY-MM-DD): ").strip()

    session = requests.Session()
    session.headers.update({"Authorization": f"Token {API_TOKEN}"})

    engagements = fetch_engagements(session)

    filtered = []
    for e in engagements:
        created_raw = e.get("created")
        if not created_raw:  # skip if no date
            continue

        # Ensure string for slicing
        created_str = str(created_raw)[:10]
        if date1 <= created_str <= date2:
            commit_hash = e.get("commit_hash", "").strip()
            if not commit_hash or commit_hash.lower() == "not started":
                review_status = "Approved"
            else:
                review_status = commit_hash

            try:
                created_dt = parser.isoparse(str(e.get("created")))
                updated_dt = parser.isoparse(str(e.get("updated")))
                timeline_days = (updated_dt - created_dt).days
            except Exception:
                timeline_days = ""

            jira_count = fetch_patch_jira_count(session, e["id"])

            filtered.append({
                "Patch": e.get("name", ""),
                "Creation Date": created_str,
                "Status": "Completed",
                "Review Status": review_status,
                "Completion Date": str(e.get("updated", ""))[:10],
                "Timeline (days)": timeline_days,
                "IR": e.get("version", ""),
                "No. of Jiras": jira_count
            })

    df = pd.DataFrame(filtered)
    file_name = f"patches_completed_{date1}-{date2}.xlsx"
    df.to_excel(file_name, index=False)
    print(f"[SUCCESS] Data saved to {file_name}")

if __name__ == "__main__":
    main()