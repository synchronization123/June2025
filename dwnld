import pandas as pd
from jira import JIRA
from datetime import datetime, date
import calendar
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment

# Configure JIRA connection (replace with your actual details)
jira_url = 'https://your-jira-instance.atlassian.net'  # Your JIRA instance URL
username = 'your-email@example.com'  # Your JIRA username (email)
api_token = 'your-api-token'  # Your JIRA API token

# Connect to JIRA
jira = JIRA(server=jira_url, basic_auth=(username, api_token))

# Find the field ID for 'Severity'
fields = jira.fields()
severity_field = next((f['id'] for f in fields if f['name'] == 'Severity'), None)
if severity_field is None:
    raise ValueError("Custom field 'Severity' not found.")

# The JQL query
jql = '(component in (Security, appsecurity) and component not in (drmc") and issuetype not in (epic, Sub-task) and project in (crm, ghi, hjf) and issuetype not in ("Spike/Task", Epic, Story, Sub-task) and component not in (dfd, uukj) and labels not in (yuit) and (Severity in (Critical) and created <= -15d and status not in (Done, Retrospected, "Reporter Review", "Ready for Testing") or Severity in (High) and created <= -30d and status not in (Done, Retrospected, "Reporter Review", "Ready for Testing") or Severity in (Medium) and created <= -90d and status not in (Done, Retrospected, "Reporter Review", "Ready for Testing") or Severity in (Low) and created <= -365d and status not in (Done, Retrospected, "Reporter Review", "Ready for Testing")))'

# Function to fetch all issues (pagination)
def get_all_issues(jql, fields):
    start = 0
    max_results = 100
    all_issues = []
    while True:
        issues = jira.search_issues(jql, startAt=start, maxResults=max_results, fields=fields)
        if not issues:
            break
        all_issues.extend(issues)
        start += len(issues)
    return all_issues

# Fetch issues
fields_to_fetch = 'project,key,created,' + severity_field
issues = get_all_issues(jql, fields_to_fetch)

# Extract data
data = []
for issue in issues:
    project_name = issue.fields.project.name
    issue_key = issue.key
    # Parse created datetime and format to MM/DD/YYYY
    created_str = datetime.strptime(issue.fields.created, '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%m/%d/%Y')
    # Get severity value
    severity_obj = getattr(issue.fields, severity_field, None)
    severity = severity_obj.value if severity_obj else ''
    data.append({
        'Project name': project_name,
        'Issue key': issue_key,
        'Created (MM/DD/YYYY)': created_str,
        'Custom field (Severity)': severity
    })

# Create DataFrame
df = pd.DataFrame(data)

# Calculate end of current month
current_date = date.today()
_, last_day = calendar.monthrange(current_date.year, current_date.month)
end_of_month = date(current_date.year, current_date.month, last_day)
end_of_month_str = end_of_month.strftime('%m/%d/%Y')

# Add 'End of Month Date' column
df['End of Month Date'] = end_of_month_str

# Calculate Aging
df['Created_dt'] = pd.to_datetime(df['Created (MM/DD/YYYY)'], format='%m/%d/%Y')
df['End of Month_dt'] = pd.to_datetime(df['End of Month Date'], format='%m/%d/%Y')
df['Aging'] = (df['End of Month_dt'] - df['Created_dt']).dt.days

# Function to determine SLA
def get_sla(row):
    severity = row['Custom field (Severity)'].lower()
    aging = row['Aging']
    if severity == 'critical' and aging > 15:
        return 'Out of SLA'
    elif severity == 'high' and aging > 30:
        return 'Out of SLA'
    elif severity == 'medium' and aging > 90:
        return 'Out of SLA'
    elif severity in ('low', 'informational', '') and aging > 365:
        return 'Out of SLA'
    else:
        return ''

# Add 'SLA' column
df['SLA'] = df.apply(get_sla, axis=1)

# Select final columns
df = df[['Project name', 'Issue key', 'Created (MM/DD/YYYY)', 'Custom field (Severity)', 'End of Month Date', 'Aging', 'SLA']]

# Save to Excel
df.to_excel('all_outofsla_jiras.xlsx', index=False)

# Now update project.xlsx
# Get counts of 'Out of SLA' per project
sla_counts = df[df['SLA'] == 'Out of SLA'].groupby('Project name').size().reset_index(name='count')
count_dict = dict(zip(sla_counts['Project name'], sla_counts['count']))

# Load workbook
wb = openpyxl.load_workbook('project.xlsx')
ws = wb.active

# Find the last column and add new column
max_col = ws.max_column
new_col = max_col + 1

# Today's date string for column header
today_str = current_date.strftime('%d-%B-%Y')

# Set header bold
header_cell = ws.cell(row=1, column=new_col, value=today_str)
header_cell.font = Font(bold=True)

# Update counts starting from row 2 (assuming headers in row 1)
for row in range(2, ws.max_row + 1):
    project_name = ws.cell(row=row, column=2).value  # Column B = 2
    if project_name:
        count = count_dict.get(project_name, 0)
        cell = ws.cell(row=row, column=new_col, value=count)
        cell.alignment = Alignment(horizontal='center')
        if count == 0:
            cell.fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')

# Center align all values except project names (column B)
for col in range(1, new_col + 1):
    if col != 2:  # Skip column B
        for row in range(2, ws.max_row + 1):
            ws.cell(row=row, column=col).alignment = Alignment(horizontal='center')

# Save the updated workbook
wb.save('project.xlsx')