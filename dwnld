import requests
import pandas as pd
import os
import time
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Border, Side, Alignment, Font
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
import logging

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('library_download.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Set working directory
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

def fetch_libraries(contrast_token, org_uuid, api_key):
    headers = {
        'Authorization': contrast_token,
        'Api-key': api_key,
        'Accept': 'application/json'
    }

    base_url = 'https://contrast.abc.com/Contrast/api/ng/'
    libraries = []
    limit = 500  # Number of libraries per request
    offset = 0
    delay = 0.5  # Delay between requests in seconds

    with requests.Session() as session:
        session.headers.update(headers)
        while True:
            url = f"{base_url}{org_uuid}/libraries?limit={limit}&offset={offset}"
            logger.info(f"Fetching libraries with offset {offset} and limit {limit}")
            
            @retry(
                stop=stop_after_attempt(3),
                wait=wait_exponential(multiplier=1, min=4, max=10),
                retry=retry_if_exception_type((requests.exceptions.RequestException,))
            )
            def make_request():
                return session.get(url, timeout=30)

            try:
                response = make_request()
                if response.status_code == 200:
                    data = response.json()
                    libraries_fetched = data.get('libraries', [])
                    logger.info(f"Fetched {len(libraries_fetched)} libraries at offset {offset}")




Title: Proper Use of "Nature of Issue" Field During Jira Creation

Team,

While creating Jira tickets, please ensure the "Nature of Issue" field is selected appropriately. The available options should be used as follows:

Option 1: New
Select this if the vulnerability is found in newly written code. This is typically identified during patch or build reviews. Please double-check and validate thoroughly before selecting this option.

Option 2: Working Feature Broken
Choose this if the vulnerability exists in previously working, existing code.


This practice will be implemented starting Monday.
Metrics for New vs Existing issues will be tracked and shared with management by Rahul, so it is important that selections are made accurately.

Letâ€™s maintain consistency and accuracy in our reporting.










                    
                    for library in libraries_fetched:
                        libraries.append({
                            'Library Name': library.get('name', ''),
                            'Version': library.get('version', ''),
                            'Score': library.get('score', 'N/A'),  # Public libraries have A-F score, private have N/A
                            'Vulnerabilities': library.get('total_vulnerabilities', 0),
                            'Language': library.get('language', ''),
                            'Hash': library.get('hash', ''),
                            'Type': 'Public' if library.get('score') else 'Private',  # Based on Contrast documentation
                            'Last Seen': library.get('last_seen', '')
                        })

                    if len(libraries_fetched) < limit:
                        logger.info("No more libraries to fetch")
                        break
                    offset += limit
                    time.sleep(delay)
                else:
                    logger.error(f"Error fetching libraries: {response.status_code} - {response.text}")
                    break
            except Exception as e:
                logger.error(f"Exception fetching libraries at offset {offset}: {e}")
                break

    return libraries

def save_to_excel(libraries):
    if not libraries:
        logger.warning("No libraries to save")
        return

    # Create DataFrame
    df = pd.DataFrame(libraries)
    
    # Define output file
    excel_file = os.path.join(script_dir, 'Libraries.xlsx')
    
    # Save to Excel
    df.to_excel(excel_file, index=False)
    logger.info(f"Libraries saved to {excel_file} (Total: {len(libraries)})")

    # Format Excel file
    wb = Workbook()
    wb = load_workbook(excel_file)
    ws = wb.active

    # Define styles
    medium_border = Border(
        left=Side(style='medium'), right=Side(style='medium'),
        top=Side(style='medium'), bottom=Side(style='medium')
    )
    thin_border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )
    center_align = Alignment(horizontal='center', vertical='center')
    left_align = Alignment(horizontal='left', vertical='center')
    bold_font = Font(bold=True)

    # Format header
    for col_idx in range(1, ws.max_column + 1):
        cell = ws.cell(row=1, column=col_idx)
        cell.font = bold_font
        cell.alignment = center_align if col_idx > 1 else left_align
        cell.border = thin_border

    # Format data rows
    for row_idx in range(2, ws.max_row + 1):
        for col_idx in range(1, ws.max_column + 1):
            cell = ws.cell(row=row_idx, column=col_idx)
            cell.alignment = center_align if col_idx > 1 else left_align
            cell.border = thin_border

    wb.save(excel_file)
    logger.info("Excel formatting applied")

def main():
    # API credentials
    contrast_token = '<<TOKEN>>'
    org_uuid = '<<UUID>>'
    api_key = '<<APIKEY>>'

    logger.info("Starting library download script...")

    # Fetch libraries
    libraries = fetch_libraries(contrast_token, org_uuid, api_key)

    # Save to Excel
    save_to_excel(libraries)

    logger.info("Script execution completed")

if __name__ == "__main__":
    main()