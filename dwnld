import requests
from datetime import datetime
import pandas as pd

# ===== CONFIG =====
API_TOKEN = "hdjdjdjdjdjd"
BASE_URL = "https://demo.defectdojo.org"
HEADERS = {"Authorization": f"Token {API_TOKEN}"}
LIMIT = 1000

# ===== API FUNCTIONS =====
def fetch_engagements(session):
    url = f"{BASE_URL}/api/v2/engagements/"
    params = {"limit": LIMIT, "offset": 0}
    print(f"[INFO] Fetching engagements...")
    r = session.get(url, params=params)
    if r.status_code != 200:
        raise RuntimeError(f"Failed to fetch engagements: {r.status_code} {r.text}")
    return r.json().get("results", [])

def fetch_findings_for_date(session, date_str):
    url = f"{BASE_URL}/api/v2/findings/"
    params = {
        "created": date_str,
        "limit": LIMIT,
        "offset": 0
    }
    print(f"[INFO] Fetching findings for {date_str}...")
    r = session.get(url, params=params)
    if r.status_code != 200:
        raise RuntimeError(f"Failed to fetch findings: {r.status_code} {r.text}")
    return r.json().get("results", [])

def fetch_patch_jira_count(session, engagement_id):
    url = f"{BASE_URL}/api/v2/tests/"
    params = {"engagement": engagement_id, "tags": "patch_jira", "limit": LIMIT, "offset": 0}
    r = session.get(url, params=params)
    if r.status_code != 200:
        return 0
    return len(r.json().get("results", []))

# ===== MAIN =====
def main():
    date1 = input("Enter Date 1 (YYYY-MM-DD): ").strip()
    date2 = input("Enter Date 2 (YYYY-MM-DD): ").strip()

    session = requests.Session()
    session.headers.update(HEADERS)

    engagements = fetch_engagements(session)
    findings_all = []
    for date_str in [date1, date2]:
        findings = fetch_findings_for_date(session, date_str)
        findings_all.extend(findings)

    rows = []
    for f in findings_all:
        name = f.get("name", "")
        created = f.get("created", "")[:10]
        updated = f.get("updated", "")[:10]
        commit_hash = f.get("commit_hash", "")
        version = f.get("version", "")
        engagement_id = f.get("engagement")
        jiras_count = fetch_patch_jira_count(session, engagement_id)

        review_status = commit_hash if commit_hash else "Approved"
        if review_status.strip().lower() == "not started" or not review_status.strip():
            review_status = "Approved"

        created_dt = datetime.strptime(created, "%Y-%m-%d")
        updated_dt = datetime.strptime(updated, "%Y-%m-%d") if updated else created_dt
        timeline_days = (updated_dt - created_dt).days

        rows.append([
            name,
            created,
            "Completed",
            review_status,
            updated,
            f"{timeline_days} day(s)",
            version,
            jiras_count
        ])

    df = pd.DataFrame(rows, columns=[
        "Patch",
        "Creation Date",
        "Status",
        "Review Status",
        "Completion Date",
        "Timeline",
        "IR",
        "No. Of Jiras"
    ])

    filename = f"patches_completed_{date1}-{date2}.xlsx"
    df.to_excel(filename, index=False)
    print(f"[SUCCESS] Data saved to {filename}")

if __name__ == "__main__":
    main()